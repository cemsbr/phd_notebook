"""Module for bundle management."""
import abc
import logging
import sys
from datetime import datetime
from os import path
from os.path import basename, dirname
from pathlib import Path


class BaseBundle(metaclass=abc.ABCMeta):
    """Bundle management."""

    def __init__(self, version, filenames):
        """Required information for bundles.

        The `version` parameter is used to decide whether to use the current
        result or run the bundle again.

        Args:
            version: If differs from files' version, run bundle again. Use any
                type that can be converted to string.
            filenames (list): List of filenames that are generated by this
                bundle.
        """
        self.version = version
        self.filenames = filenames
        child_file = sys.modules[self.__module__].__file__
        #: Dirname of the child class
        self.path = dirname(child_file)
        self.log = self._get_logger()
        self._start = None

    def update(self):
        """Run the bundle if any filename of this version doesn't exist.

        You probably don't want to override this method, but :method:`run`.
        """
        up2date = True

        for filename in self.get_versioned_filenames():
            file = Path(filename)
            if not file.exists():
                self.log.info('File %s not found.', file.name)
                up2date = False
                self.run()
                break

        if up2date:
            self.log.info('Output is up-to-date.')

    def get_versioned_filenames(self):
        """Insert version in all filenames.

        Returns:
            list: :attribute:`filenames` with version information.
        """
        return tuple(self.get_versioned_filename(f) for f in self.filenames)

    def get_versioned_filename(self, filename):
        """Insert version in the filename.

        If version is 1:
        - test.tar.gz -> test_v1.tar.gz
        - test -> test_v1

        Returns:
            str: `filename` with version information.
        """
        split = filename.split('.', 1)
        ver_suffix = '_v{}'.format(self.version)
        if len(split) > 1:
            ver_suffix += '.'
        split.insert(-1, ver_suffix)
        versioned_basename = ''.join(split)
        return path.join(self.path, versioned_basename)

    def start(self):
        """Log the start and save start time."""
        self.log.info('Started...')
        self._start = datetime.now()

    @abc.abstractmethod
    def run(self):
        """:attribute:`filenames` generation."""
        pass

    def finish(self):
        """Call after :method:`run` is finished."""
        duration = datetime.now() - self._start
        self.log.info('Finished. Duration: %s', duration)

    def _get_logger(self):
        logger = logging.Logger(basename(self.path) + ' BaseBundle')
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s '
                                      '- %(message)s')
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger
